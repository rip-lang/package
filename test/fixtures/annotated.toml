# package_details = TOML.load_file(package_path)


# package name
# this is the name dependent packages should import
name = "specification" # required


# version must be a SemVer 2 compatible version string
version = "0.1.0" # required


# any name recognized by OSI may be used
# the special name "proprietary" may also be used
license = "MIT"

# alternatively specify any arbitrary license in a file
# license_file = "LICENSE.txt"

# one of `license` or `license_file` is required


homepage = "http://www.rip-lang.org/"

description = """
Describe the package here. Optionally use markdown.
"""


# at least one author is required
# if you just have a single author, use `[author]`
[author]
name = "Thomas Ingram"     # required
email = "code@example.com" # required

# multiple authors may be specified by duplicating this block and changing the values
# [[authors]]
# name = "Thomas Ingram"     # required
# email = "code@example.com" # required

# [[authors]]
# name = "Allea Ingram"
# email = "she@example.com"

# it is an error to specify both `[author]` and `[[authors]]`


# output executables when running `$ rip compile`
# the starting source file is on the left
# the output binary name is on the right
# this section is optional and is meant for application developers
[executables]
"source/main.rip" = "build/rip-spec"


# extra metadata specific to this project. put whatever you want in here
[extra]

# everything in here will wrapped with Hashie::Mash
answer = { life = 42, universe = 42, everything = 42 }


# technically optional. if you have no dependencies, just leave this out
[dependencies]

# simplest version constraint
# this will search the public repository for `foo`
# `vary` option (below) defaults to "minor"
foo = "2.0.1"

# this is the expanded way to write the same version as above
# it will match the greatest version possible, with the following constraints
#   1) may be equal to `2.0.1`, exactly
#   2) any version greater than `2.0.1`
#   3) any version less that `3.0.0`
#   4) stable releases only
# you can also set `vary` to "patch", which changes constraint 3 above to any version less than `2.1.0`
bar = { version = "2.0.1", vary = "minor" }

# match the version exactly
baz = { version = "2.0.1", vary = "exact" }

# use a alternative repository and only accept patch-level changes
bax = { version = "0.1.2", vary = "patch", repository = "https://packages.example.com/" }

# pull code from a git server
rip = { git = "git@github.com:rip-lang/rip.git" }

# you can be more specific with `commit`. set it to a branch or tag
# if a branch, use the most recent commit on branch
# defaults to master branch
nip = { git = "git@github.com:rip-lang/rip.git", commit = "special-feature" }
tip = { git = "git@github.com:rip-lang/rip.git", commit = "v1.2.3" }

# point to an exact commit
sip = { git = "git@github.com:rip-lang/rip.git", commit = "7913a93d" }

# you can also point git to a local directory containing a git checkout
# commit works here too
fip = { git = "../rip-rip" }

# you can also specify a local path to a dependency
xxx = { path = "../bax-core" }
